


* PROLOG for Programmers Introduction (in PROLOG)
* using: https://www.cpp.edu/~jrfisher/www/prolog_tutorial/2_15.html
* Declarative <== Relational
* PROLOG == Relational
* miniKanren == Relational

* figure
[[./f2_15.gif][figure]]
* factbase
edge(1,2).
edge(1,4).
edge(1,3).
edge(2,3).
edge(2,5).
edge(3,4).
edge(3,5).
edge(4,5).
* basic relation
connected(X,Y) :- edge(X,Y).
connected(X,Y) :- edge(Y,X).
* alternate basic relation
connected(X,Y) :- edge(X,Y) ; edge(Y,X).
* inferring connections
** Divide and Conquer
*** do-it style
**** top level
path(A,B,Path) :- BasicPath = [A], inferPath(A,B,BasicPath,Path).
**** base case
inferPath(A,B,P,ResultPath) :- connected(A,B), ResultPath = [B|P].
**** recursive case
inferPath(A,B,PriorPath,ResultPath) :-
       connected(A,C),           
       C \== B,
       \+member(C,PriorPath),
       NewPath = [ C | PriorPath ],
       inferPath(C,B,NewPath,ResultPath).  

*** PROLOGify - Better Relations
**** top level
path(A,B,Path) :- BasicPath = [A], inferPath(A,B,BasicPath,Path).
---> 
path(A,B,Path) :- inferPath(A,B,[A],Path).
**** base case
inferPath(A,B,P,ResultPath) :- connected(A,B), ResultPath = [B|P].
--->
inferPath(A,B,P,[B|P]) :- connected(A,B).
**** recursive case
inferPath(A,B,PriorPath,ResultPath) :-
       connected(A,C),           
       C \== B,
       \+member(C,PriorPath),
       NewPath = [ C | PriorPath ],
       inferPath(C,B,NewPath,ResultPath).  
--->
inferPath(A,B,Visited,Path) :-
       connected(A,C),           
       C \== B,
       \+member(C,Visited),
       inferPath(C,B,[C|Visited],Path).  


       
